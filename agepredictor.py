# -*- coding: utf-8 -*-
"""AgePredictor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iBz9J4pF6rN5YAWrXh0fdGVaYqw6oGqY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler
import copy
import seaborn as sns
from sklearn.linear_model import LinearRegression

cols = ["Sex", "Length", "Diameter", "Height", "Whole_weight", "Shucked_weight", "Viscera_weight", "Shell_weight", "Rings"]
df = pd.read_csv("abalone.data", names = cols)
df.head()

df["Sex"] = df["Sex"].replace(to_replace='I', value=int('0'))
df["Sex"] = df["Sex"].replace(to_replace='F', value=int('1'))
df["Sex"] = df["Sex"].replace(to_replace='M', value=int('2'))
df.head()

for label in df.columns[:-1]:
  plt.scatter(df[label], df["Rings"])
  plt.title(label)
  plt.ylabel("Rings")
  plt.xlabel(label)
  plt.show()

df = df.drop(["Sex"], axis=1)

df.head()

train, val, test = np.split(df.sample(frac=1), [int(0.6*len(df)), int(0.8*len(df))])

def get_xy(dataframe, y_label, x_labels=None):
  dataframe = copy.deepcopy(dataframe)
  if x_labels is None:
    x = dataframe[[c for c in dataframe.columns if c != y_label]].values
  else:
    if len(x_labels) == 1:
      x = dataframe[x_labels[0]].values.reshape(-1, 1)
    else:
      x = dataframe[x_labels].values

  y = dataframe[y_label].values.reshape(-1, 1)
  data = np.hstack((x, y))

  return data, x, y

_, x_train, y_train = get_xy(train, "Rings", x_labels=["Height"])
_, x_val, y_val = get_xy(val, "Rings", x_labels=["Height"])
_, x_test, y_test = get_xy(test, "Rings", x_labels=["Height"])

lin_reg = LinearRegression()
lin_reg.fit(x_train, y_train)

plt.scatter(x_train, y_train, label="Data", color="blue")
x = tf.linspace(0.0, 0.3, 100)
plt.plot(x, lin_reg.predict(np.array(x).reshape(-1, 1)), label="Fit", color="red", linewidth=3)
plt.legend()
plt.title("Age vs Height")
plt.xlabel("Height")
plt.ylabel("Age")
plt.show()

_, x_train_all, y_train_all = get_xy(train, "Rings", x_labels=df.columns[:-1])
_, x_val_all, y_val_all = get_xy(val, "Rings", x_labels=df.columns[:-1])
_, x_test_all, y_test_all = get_xy(test, "Rings", x_labels=df.columns[:-1])

reg = LinearRegression()
reg.fit(x_train_all, y_train_all)

reg.score(x_test, y_test)

def plot_loss(history):
  plt.plot(history.history['loss'], label='loss')
  plt.plot(history.history['val_loss'], label='val_loss')
  plt.xlabel('Epoch')
  plt.ylabel('MSE')
  plt.legend()
  plt.grid(True)
  plt.show()

height_normalizer = tf.keras.layers.Normalization(input_shape=(1,), axis=None)
height_normalizer.adapt(x_train.reshape(-1))

height_nn_model = tf.keras.Sequential([
    height_normalizer,
    tf.keras.layers.Dense(1)
])

height_nn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.1), loss='mean_squared_error')

history = height_nn_model.fit(
    x_train.reshape(-1), y_train,
    verbose = 0,
    epochs = 1000,
    validation_data = (x_val, y_val)
)

plot_loss(history)

plt.scatter(x_train, y_train, label="Data", color="blue")
x = tf.linspace(0.0, 0.3, 100)
plt.plot(x, height_nn_model.predict(np.array(x).reshape(-1, 1)), label="Fit", color="red", linewidth=3)
plt.legend()
plt.title("Age vs Height")
plt.xlabel("Height")
plt.ylabel("Age")
plt.show()

normalizer = tf.keras.layers.Normalization(input_shape=(7,), axis=-1)
normalizer.adapt(x_train_all)

nn_model = tf.keras.Sequential([
    normalizer,
    tf.keras.layers.Dense(1)
])

nn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.1), loss='mean_squared_error')

history = nn_model.fit(
    x_train_all, y_train_all,
    verbose = 0,
    epochs = 1000,
    validation_data = (x_val_all, y_val_all)
)

plot_loss(history)

plt.scatter(x_train_all, y_train_all, label="Data", color="blue")
x = tf.linspace(0.0, 0.3, 100)
plt.plot(x, nn_model.predict(np.array(x).reshape(-1, 1)), label="Fit", color="red", linewidth=3)
plt.legend()
plt.title("Age vs Height")
plt.xlabel("Height")
plt.ylabel("Age")
plt.show()

"""------------------------------------------------------------------------------------------------------"""

height_normalizer = tf.keras.layers.Normalization(input_shape=(1,), axis=None)
height_normalizer.adapt(x_train.reshape(-1))

height_nn_model = tf.keras.Sequential([
    height_normalizer,
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1),
])

height_nn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss='mean_squared_error')

history = height_nn_model.fit(
    x_train, y_train,
    validation_data = (x_val, y_val),
    verbose = 0, epochs = 100
)

plot_loss(history)

plt.scatter(x_train, y_train, label="Data", color="blue")
x = tf.linspace(0.0, 0.25, 100)
plt.plot(x, height_nn_model.predict(np.array(x).reshape(-1, 1)), label="Fit", color="red", linewidth=3)
plt.legend()
plt.title("Age vs Height")
plt.xlabel("Height")
plt.ylabel("Age")
plt.show()

all_normalizer = tf.keras.layers.Normalization(input_shape=(7,), axis=-1)
all_normalizer.adapt(x_train_all)

nn_model = tf.keras.Sequential([
    all_normalizer,
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1),
])

nn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss='mean_squared_error')

history = nn_model.fit(
    x_train_all, y_train_all,
    verbose = 0,
    epochs = 1000,
    validation_data = (x_val_all, y_val_all)
)

plot_loss(history)

y_pred_lr = reg.predict(x_test_all)
y_pred_nn = nn_model.predict(x_test_all)

def MSE(y_pred, y_real):
  return (np.square(y_pred - y_real)).mean()

MSE(y_pred_lr, y_test_all)

MSE(y_pred_nn, y_test_all)

ax = plt.axes(aspect="equal")
plt.scatter(y_test_all[:-700], y_pred_lr[:-700], label="Lin Reg Preds")
plt.scatter(y_test_all[:-700], y_pred_nn[:-700], label="NN Preds")
plt.xlabel("True values")
plt.ylabel("Predictions")
lims = [2, 25]
plt.xlim(lims)
plt.ylim(lims)
plt.legend()
_ = plt.plot(lims, lims, c="red")